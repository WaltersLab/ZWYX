? getTotalReads
library("ZWYX")
usethis::load_all()
load_all()
library(usethis)
load_all()
devtools::load_all(".")
? getTotalReads
? mean
library(devtools)
document()
load_all()
? getNormFactors
? normalizeCounts
load_all()
? getNormFactors
document()
? getNormFactors
? normalizeCounts
document()
? normalizeCounts
? getNormDataByScaff
? getGRfromSE
? getNormDataByScaff
? log2
? getRatiosByScaff
> runChangpointOnGR
? runChangpointOnGR
? runChangepointOnSE
? zwyxPlot
dmel_counts_file <- "/Users/jwalters/Dropbox/Mac/Documents/doseR_Project/zwyx_package/zwyx_dev/Dmel_genome_Zwyx/chimeraDmel_readcounts_rnd3.txt.gz"
dmel_counts <- read.delim(file = dmel_counts_file, header = TRUE)
head(dmel_counts)
usethis::use_data(dmel_counts)
dim(dmel_counts)
? dmel_counts
load_all()
library(ZWYX)
data("dmel_counts")
head(dmel_counts)
library(ZWYX)
? start
library(GenomicRanges)
? start
library(changepoint)
? cpts
? rng.start
? rowMeans
changepoint::cpt.mean
? seqnames
? rowMeans
? rowRanges
library(SummarizedExperiment)
? rowRanges
? segments
? mcols
? median
? mean
? tail
? end
? use_mit_license
? use_mit_license()
use_mit_license()
library(ZWYX)
? mergeSegments
devtools::check()
? SummarizedExperiment
devtools::check()
dir()
? zwyxPlot
data("dmel_counts")
head(dmel_counts)
usethis::use_vignette("ZWYX_Introduction")
library(ZWYX)
data("dmel_counts")
head(dmel_counts)
length(unique(dmel_counts$scaffold))
? getRatiosByScaff
library(ZWYX)
scaffoldRatiosTot <- getRatiosByScaff(norm.tot)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ZWYX)
data("dmel_counts")
head(dmel_counts)
suppressMessages( library(SummarizedExperiment) )
counts_ranges.dmel <- makeGRangesFromDataFrame(df = dmel_counts, seqnames.field = "scaffold")
counts_ranges.dmel
sample.dmel <- data.frame("sampleID" = names(dmel_counts)[-(1:3)],
"gamety" = c("Het","Het","Hom","Hom","Het","Hom")
)
count.se <- SummarizedExperiment(assays = list("counts" = dmel_counts[,-(1:3)]),
rowRanges = counts_ranges.dmel,
colData = sample.dmel)
count.se
norm.tot <- normalizeCounts(se = count.se, method = "totalreads")
norm.tot
head(assays(norm.tot)[["normdata"]])
scaffoldRatiosTot <- getRatiosByScaff(norm.tot)
head(scaffoldRatiosTot)
library(ggplot2)
ggplot(data = scaffoldRatiosTot, aes(x=log10(scaffLen), y = log2homhet, col = Linkage) + geom_point() +
+ labs(y = "Log2(Female:Male)", x = "Log10(Fragment Length)")
)
library(ggplot2)
ggplot(data = scaffoldRatiosTot, aes(x=log10(scaffLen), y = log2homhet, col = Linkage)) + geom_point() +
+ labs(y = "Log2(Female:Male)", x = "Log10(Fragment Length)")
library(ggplot2)
ggplot(data = scaffoldRatiosTot, aes(x=log10(scaffLen), y = log2homhet, col = Linkage)) + geom_point() +
labs(y = "Log2(Female:Male)", x = "Log10(Fragment Length)")
library(ggplot2)
ggplot(data = scaffoldRatiosTot, aes(x=log10(scaffLen), y = log2homhet, col = Linkage)) + geom_point() +
labs(y = "Log2(Female:Male)", x = "Log10(Fragment Length)") +
scale_color_manual(values = c("black","red", "blue"))
? runChangepointOnSE
mergeSegments()
? mergeSegments
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ZWYX)
data("dmel_counts")
head(dmel_counts)
suppressMessages( library(SummarizedExperiment) )
counts_ranges.dmel <- makeGRangesFromDataFrame(df = dmel_counts, seqnames.field = "scaffold")
counts_ranges.dmel
sample.dmel <- data.frame("sampleID" = names(dmel_counts)[-(1:3)],
"gamety" = c("Het","Het","Hom","Hom","Het","Hom")
)
count.se <- SummarizedExperiment(assays = list("counts" = dmel_counts[,-(1:3)]),
rowRanges = counts_ranges.dmel,
colData = sample.dmel)
count.se
norm.tot <- normalizeCounts(se = count.se, method = "totalreads")
norm.tot
head(assays(norm.tot)[["normdata"]])
scaffoldRatiosTot <- getRatiosByScaff(norm.tot)
head(scaffoldRatiosTot)
library(ggplot2)
ggplot(data = scaffoldRatiosTot, aes(x=log10(scaffLen), y = log2homhet, col = Linkage)) + geom_point() +
labs(y = "Log2(Female:Male)", x = "Log10(Fragment Length)") +
scale_color_manual(values = c("black","red", "blue")) + theme_light()
scaffoldRatiosTot$chimera <- grepl(x = scaffoldRatiosTot$scaffold, pattern="chimera")
scaffoldRatiosTot$chrom <- gsub(x=scaffoldRatiosTot$scaffold,
pattern = "(\\w)\\w?\\..*", rep="\\1", perl = T)
ggtot <- ggplot(data = scaffoldRatiosTot, aes(x=log10(scaffLen), y = log2homhet,
col = chimera, pch = chrom)) + geom_point() +
scale_color_manual(values = c("black","red"))  +
labs(y = "Log2(Female:Male)", x = "Log10(Fragment Length)") +
theme_light()
print(ggtot)
cp.out <- runChangepointOnSE(se = norm.tot)
cp.out["2L.2_5878429_9317088_chimeraAX"]
outsegs.df <- mergeSegments(changeList = cp.out, asDF = FALSE)
outsegs.df <- mergeSegments(changeList = cp.out[1], asDF = FALSE)
GenomicRanges::reduce
tmp <- cp.out["2L.2_5878429_9317088_chimeraAX"][[2]]
cp.out["2L.2_5878429_9317088_chimeraAX"]
tmp <- cp.out["2L.2_5878429_9317088_chimeraAX"][2]
tmp
tmp <- cp.out[["2L.2_5878429_9317088_chimeraAX"]][2]
tmp
tmp1 <- cp.out[["2L.2_5878429_9317088_chimeraAX"]][2]
tmp2 <- split(tmp1, ~Linkage)
tmp2 <- GenomicRanges::split(tmp1, ~Linkage)
tmp1
GenomicRanges::split(tmp1, ~Linkage)
? split
? GenomicRanges::split
GenomicRanges::split
showMethods(split)
tmp1$Linkage
metadata(tmp1)
? metadata
mcols(tmp1)
library(GenomicRanges)
mcols(tmp1)
mcols(tmp2)
? mcols
tmp1
tmp1 <- cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]]
tmp1
tmp2 <- GenomicRanges::split(tmp1, ~Linkage)
tmp2
reduceSegments(tmp1)
tmp2 <- GenomicRanges::split(tmp1, ~Linkage)
reduce(tmp2)
reduceSegments(cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]])
cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]]
tmp1 <- cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]]
tmp2 <- GenomicRanges::split(tmp1, ~Linkage)
tmp3 <- reduce(tmp2)
tmp3
tmp4 <- unlist(tmp3)
tmp4
mergeSegments(changeList = cp.out[[1]], asDF = FALSE)
mergeSegments(changeList = cp.out[1], asDF = FALSE)
reduceSegments(cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]])
cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]]
tmp1 <- cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]]
GenomicRanges::split(tmp1, ~Linkage)
tmp2 <- GenomicRanges::split(tmp1, ~Linkage)
reduce(tmp2)
tmp3
unlist(tmp3)
tmp4
mergeSegments(changeList = cp.out[1:3], asDF = FALSE)
? boxplot
gentpeng <- penguins[ penguins$species == "Gentoo", ]
? write.table
penguins <- read.table(file = "penguins_csv_noquote.txt")
library(ZWYX)
data("dmel_counts")
head(dmel_counts)
suppressMessages( library(SummarizedExperiment) )
counts_ranges.dmel <- makeGRangesFromDataFrame(df = dmel_counts, seqnames.field = "scaffold")
counts_ranges.dmel
sample.dmel <- data.frame("sampleID" = names(dmel_counts)[-(1:3)],
"gamety" = c("Het","Het","Hom","Hom","Het","Hom")
)
count.se <- SummarizedExperiment(assays = list("counts" = dmel_counts[,-(1:3)]),
rowRanges = counts_ranges.dmel,
colData = sample.dmel)
count.se
norm.tot <- normalizeCounts(se = count.se, method = "totalreads")
norm.tot
head(assays(norm.tot)[["normdata"]])
scaffoldRatiosTot <- getRatiosByScaff(norm.tot)
head(scaffoldRatiosTot)
library(ggplot2)
ggplot(data = scaffoldRatiosTot, aes(x=log10(scaffLen), y = log2homhet, col = Linkage)) + geom_point() +
labs(y = "Log2(Female:Male)", x = "Log10(Fragment Length)") +
scale_color_manual(values = c("black","red", "blue")) + theme_light()
scaffoldRatiosTot$chimera <- grepl(x = scaffoldRatiosTot$scaffold, pattern="chimera")
scaffoldRatiosTot$chrom <- gsub(x=scaffoldRatiosTot$scaffold,
pattern = "(\\w)\\w?\\..*", rep="\\1", perl = T)
ggtot <- ggplot(data = scaffoldRatiosTot, aes(x=log10(scaffLen), y = log2homhet,
col = chimera, pch = chrom)) + geom_point() +
scale_color_manual(values = c("black","red"))  +
labs(y = "Log2(Female:Male)", x = "Log10(Fragment Length)") +
theme_light()
print(ggtot)
cp.out <- runChangepointOnSE(se = norm.tot)
cp.out[["2L.2_5878429_9317088_chimeraAX"]]
outsegs.df <- mergeSegments(changeList = cp.out[1:3], asDF = FALSE)
tmp1 <- cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]]
tmp1
tmp2 <- GenomicRanges::split(tmp1, ~Linkage)
tmp2
tmp3 <- reduce(tmp2)
tmp3
tmp4 <- unlist(tmp3)
tmp4
reduceSegments(cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]])
redseg <- function( SegmentGR ) {
splitGR <- GenomicRanges::split(SegmentGR, ~Linkage)
reduceGR <- GenomicRanges::reduce(splitGR)
outGR <- unlist(reduceGR)
outGR$Linkage <- names(outGR)
names(outGR) <- NULL
return(sort(outGR))
}
reduceSegments(cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]])
redseg(cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]])
source("~/Dropbox/Mac/Documents/doseR_Project/zwyx_package/ZWYX/R/mergeSegments.R")
reduceSegments(cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]])
source("~/Dropbox/Mac/Documents/doseR_Project/zwyx_package/ZWYX/R/mergeSegments.R")
reduceSegments(cp.out[["2L.2_5878429_9317088_chimeraAX"]][[2]])
outsegs.df <- mergeSegments(changeList = cp.out[1:3], asDF = FALSE)
head(outsegs.df)
library(ZWYX)
vignette("ZWYX")
vignette(ZWYX)
vignette()
browseVignettes("ZWYX")
devtools::build_rmd()
library(ZWYX)
# Extract a known chimeric scaffold for demonstration
cp <- cp.out[[2]]
zwyxPlot(InputGR = cp[[1]], SegmentGR = cp[[2]], bpunit = "mbp",
pch = 19, cex = 0.2)
cp
unique(seqnames(cp[[1]]))
# Extract a known chimeric scaffold for demonstration
cp <- cp.out[[2]]
zwyxPlot(InputGR = cp[[1]], SegmentGR = cp[[2]], bpunit = "mbp",
pch = 19, cex = 0.2, seglwd = 3, main = unique(seqnames(cp[[1]])))
# Extract a known chimeric scaffold for demonstration
cp <- cp.out[[2]]
zwyxPlot(InputGR = cp[[1]], SegmentGR = cp[[2]], bpunit = "mbp",
pch = 19, cex = 0.2, seglwd = 3, main = unique(seqnames(cp[[1]]))
xlab = "Position (Mbp)", ylab = "Log2(Het:Hom")
# Extract a known chimeric scaffold for demonstration
cp <- cp.out[[2]]
zwyxPlot(InputGR = cp[[1]], SegmentGR = cp[[2]], bpunit = "mbp",
pch = 19, cex = 0.2, seglwd = 3, main = unique(seqnames(cp[[1]])) ,
xlab = "Position (Mbp)", ylab = "Log2(Het:Hom")
which(scaffoldRatiosTot$chimera)
chimera.ind <- which(scaffoldRatiosTot$chimera)
par(mfrow = c(4,2))
for (nscaff in chimera.ind) {
zwyxPlot(InputGR = cp.out[[nscaff]][[1]], SegmentGR = cp.out[[nscaff]][[2]],
bpunit="mbp", pch = 19, cex = .2, seglwd = 3,
main = names(cp.out [nscaff]),  xlab = "Position (Mbp)", ylab = "Log2(Het:Hom" )
}
browseVignettes("DEP")
browseVignettes("DESeq2")
browseVignettes("SummarizedExperiment")
install.packages("BiocStyle")
BiocManager::install("BiocStyle")
library(available)
available("zwyx")
usethis::use_package("ggplot2", "Suggests")
library(ZWYX)
browseVignettes("ZWYX")
browseVignettes(ZWYX)
